    1  ls -a
    2  cd .git
    3  ls
    4  git status
    5  clear
    6  cd ..
    7  ls -a
    8  clear
    9  git status
   10  git add .
   11  git status
   12  git commit -m "file deleted"
   13  git config --global user.email "engsunny3365@gmmail.com"
   14  git config --global user.name "sunnysavita10"
   15  git commit -m "file deleted"
   16  clear
   17  git status
   18  git branch
   19  git delete -d testgfirstbranch
   20  git branch -d testgfirstbranch
   21  clear
   22  git branch
   23  history
   24  clear
   25  git branch
   26  python testing.py
   27  python testing.py
   28  git add testing
   29  clear
   30  git status
   31  git add testing
   32  git add testing.py
   33  git status
   34  git commit -m "addition done"
   35  git log
   36  git branch branch1
   37  git branch
   38  git checkout branch1
   39  git branch
   40  git status
   41  git branch
   42  git checkout master
   43  git stauts
   44  git status
   45  git checkout branch1
   46  git add .
   47  gti commit -m "multiplication added"
   48  git commit -m "multiplication added"
   49  clear
   50  git branch
   51  git add .
   52  git commit -m "alright"
   53  clear
   54  git branch
   55  git branch master
   56  git checkout master
   57  history
    clear
   59  git branch
   60  git status
   61  git add .
   62  git commit -m "crated a new file"
   63  clear
   64  git branch
   65  git checkout branch1
   66  git branch
   67  git add .
   68  git commit -m "file added"
   69  clea
   70  clear
   71  git checkout master
   72  git branch
   73  cledar
   74  clear
   75  git merge branch1
   76  clear
   77  git branch
   78  git checkout branch1
   79  history
   80  clear
   81  git branch
   82  git branch master
   83  git checkout  master
   84  git add .
   85  git commit -m "demo file added"
   86  clear
   87  git checkout branch1
   88  git add .
   89  git commit -m "demo created and text added"
   90  clear
   91  git checkout master
   92  git checkout master
   93  git checkout branch1
   94  git checkout master
   95  clear
   96  git merge branch1
   97  git add .
   98  git comiit -m "succfully merged"
   99  git commit -m "succfully merged"
  100  clear
  101  touch stashingdemo.txt
  102  git add .
  103  git commit -m "stashed file updated"
  104  clear
  105  git status
  106  git branch
  107  git stash
  108  git stash list
  109  git stash
  110  git stash list
  111  git stash
  112  git stash list
  113  git stash apply stash@{0}
  114  git stash apply stash@{2}
  115  git add .
  116  git commit -m "text is updated"
  117  git stash list
  118  git stash apply stash@{2}
  119  git add .
  120  git commit -m "file updated"
  121  git stash list
  122  git stash clear
  123  git stash list
  124  clear
  125  history
  126  git log --oneline
  127  git reset filename
  128 git revert id_or_hashkey_or_the number generated by git log --oneline 
  129 git pull 
  130 git fetch 


git rm --cached <files> # similar to adding files in the gitignore
git restore --staged <files>  # removing from the present staging area or unstaging but will be traced 
git reset . 
git show <id or hash_key of alpha numeric >
## assume that it is commited and u did some changes in the file now if i did not add to staging area and i want to revert to previous commit then use 
git restore filename
git reset --hard # similar to above commad but removes from wd and staging area 

git reset and git revert that in reset the commit history will be deleted and in revert commit dont get deleted 
git reset HEAD^1


git reset –hard HEAD~1 – After reset, It removes changes from staging area and working copy.
git reset HEAD~1 – After reset, working tree will not be affected. But changes in staging area will be removed.
git reset –soft HEAD~1 – After reset, working tree and index (staging area) is not affected.
git reset –hard origin/master : resets the local branch to remote master branch


git reflog ## to bring back the deleted commit 


